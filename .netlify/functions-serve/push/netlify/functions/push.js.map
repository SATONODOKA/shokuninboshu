{
  "version": 3,
  "sources": ["../../../../../../Users/satonodoka/Desktop/shokuninboshu/shokuninboshu-app/netlify/functions/push.ts"],
  "sourceRoot": "/var/folders/hc/8f_g4lqn545fsghk0gdpyx_00000gn/T/tmp-38991-du2l6i7vOq2M",
  "sourcesContent": ["import type { Handler } from '@netlify/functions';\n\nexport const handler: Handler = async (event) => {\n  const headers = {\n    'Content-Type': 'application/json',\n    'Access-Control-Allow-Origin': '*',\n    'Access-Control-Allow-Headers': 'Content-Type',\n    'Access-Control-Allow-Methods': 'POST, OPTIONS'\n  };\n\n  if (event.httpMethod === 'OPTIONS') {\n    return { statusCode: 200, headers, body: '' };\n  }\n\n  try {\n    if (!process.env.LINE_CHANNEL_ACCESS_TOKEN) {\n      return {\n        statusCode: 500,\n        headers,\n        body: JSON.stringify({ error: 'LINE_CHANNEL_ACCESS_TOKEN not configured' })\n      };\n    }\n\n    const { to, messages } = JSON.parse(event.body || '{}');\n    if (!to || !Array.isArray(messages)) {\n      return {\n        statusCode: 400,\n        headers,\n        body: JSON.stringify({ error: 'Invalid payload: to and messages required' })\n      };\n    }\n\n    const res = await fetch('https://api.line.me/v2/bot/message/push', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${process.env.LINE_CHANNEL_ACCESS_TOKEN}`\n      },\n      body: JSON.stringify({ to, messages })\n    });\n\n    const text = await res.text();\n    \n    return {\n      statusCode: res.status,\n      headers,\n      body: res.ok ? text : JSON.stringify({ error: text })\n    };\n  } catch (e: any) {\n    return {\n      statusCode: 500,\n      headers,\n      body: JSON.stringify({ error: e?.message || 'Internal server error' })\n    };\n  }\n};"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAEO,IAAM,UAAmB,OAAO,UAAU;AAC/C,QAAM,UAAU;AAAA,IACd,gBAAgB;AAAA,IAChB,+BAA+B;AAAA,IAC/B,gCAAgC;AAAA,IAChC,gCAAgC;AAAA,EAClC;AAEA,MAAI,MAAM,eAAe,WAAW;AAClC,WAAO,EAAE,YAAY,KAAK,SAAS,MAAM,GAAG;AAAA,EAC9C;AAEA,MAAI;AACF,QAAI,CAAC,QAAQ,IAAI,2BAA2B;AAC1C,aAAO;AAAA,QACL,YAAY;AAAA,QACZ;AAAA,QACA,MAAM,KAAK,UAAU,EAAE,OAAO,2CAA2C,CAAC;AAAA,MAC5E;AAAA,IACF;AAEA,UAAM,EAAE,IAAI,SAAS,IAAI,KAAK,MAAM,MAAM,QAAQ,IAAI;AACtD,QAAI,CAAC,MAAM,CAAC,MAAM,QAAQ,QAAQ,GAAG;AACnC,aAAO;AAAA,QACL,YAAY;AAAA,QACZ;AAAA,QACA,MAAM,KAAK,UAAU,EAAE,OAAO,4CAA4C,CAAC;AAAA,MAC7E;AAAA,IACF;AAEA,UAAM,MAAM,MAAM,MAAM,2CAA2C;AAAA,MACjE,QAAQ;AAAA,MACR,SAAS;AAAA,QACP,gBAAgB;AAAA,QAChB,iBAAiB,UAAU,QAAQ,IAAI,yBAAyB;AAAA,MAClE;AAAA,MACA,MAAM,KAAK,UAAU,EAAE,IAAI,SAAS,CAAC;AAAA,IACvC,CAAC;AAED,UAAM,OAAO,MAAM,IAAI,KAAK;AAE5B,WAAO;AAAA,MACL,YAAY,IAAI;AAAA,MAChB;AAAA,MACA,MAAM,IAAI,KAAK,OAAO,KAAK,UAAU,EAAE,OAAO,KAAK,CAAC;AAAA,IACtD;AAAA,EACF,SAAS,GAAQ;AACf,WAAO;AAAA,MACL,YAAY;AAAA,MACZ;AAAA,MACA,MAAM,KAAK,UAAU,EAAE,OAAO,GAAG,WAAW,wBAAwB,CAAC;AAAA,IACvE;AAAA,EACF;AACF;",
  "names": []
}
